ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB136:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdint.h>
  25:Core/Src/main.c **** #include "stm32f4xx.h"
  26:Core/Src/main.c **** #include "core_cm4.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 2


  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** #define MAX_ITER 100
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** //TODO: Define variables you think you might need
  48:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  49:Core/Src/main.c **** uint32_t start_time = 0;
  50:Core/Src/main.c **** uint32_t end_time = 0;
  51:Core/Src/main.c **** uint32_t execution_time = 0;
  52:Core/Src/main.c **** uint64_t checksum = 0;
  53:Core/Src/main.c **** uint32_t cpuCycle = 0;
  54:Core/Src/main.c **** uint64_t totalPixels = 0;
  55:Core/Src/main.c **** double executionSec = 0;
  56:Core/Src/main.c **** double throughput = 0;
  57:Core/Src/main.c **** int width = 0;
  58:Core/Src/main.c **** int height = 0;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** int widths[] = {128, 160, 192, 224, 265};
  61:Core/Src/main.c **** int heights[] = {128, 160, 192, 224, 265};
  62:Core/Src/main.c **** uint32_t execTimes[5];
  63:Core/Src/main.c **** uint64_t checksums[5];
  64:Core/Src/main.c **** uint32_t cpuCycles[5];
  65:Core/Src/main.c **** double throughputs[5];
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END PV */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  70:Core/Src/main.c **** void SystemClock_Config(void);
  71:Core/Src/main.c **** static void MX_GPIO_Init(void);
  72:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  73:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
  74:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
  75:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END PFP */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  80:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /* USER CODE END 0 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /**
  85:Core/Src/main.c ****   * @brief  The application entry point.
  86:Core/Src/main.c ****   * @retval int
  87:Core/Src/main.c ****   */
  88:Core/Src/main.c **** int main(void)
  89:Core/Src/main.c **** {
  90:Core/Src/main.c **** 
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END 1 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  98:Core/Src/main.c ****   HAL_Init();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END Init */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Configure the system clock */
 105:Core/Src/main.c ****   SystemClock_Config();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE END SysInit */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Initialize all configured peripherals */
 112:Core/Src/main.c ****   MX_GPIO_Init();
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 114:Core/Src/main.c ****   CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 115:Core/Src/main.c ****   DWT->CYCCNT = 0;
 116:Core/Src/main.c ****   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 117:Core/Src/main.c ****   /* USER CODE END 2 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* Infinite loop */
 120:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 121:Core/Src/main.c ****   while (1)
 122:Core/Src/main.c ****   {
 123:Core/Src/main.c ****     /* USER CODE END WHILE */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** 	for (int i = 0; i < 5; i++) {
 128:Core/Src/main.c **** 		int width = widths[i];
 129:Core/Src/main.c **** 		int height = heights[i];
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** 		//TODO: Visual indicator: Turn on LED0 to signal processing start
 132:Core/Src/main.c **** 	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** 		DWT->CYCCNT = 0;
 135:Core/Src/main.c **** 		//TODO: Record the start time
 136:Core/Src/main.c **** 		start_time = HAL_GetTick();
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** 		//TODO: Call the Mandelbrot Function and store the output in the checksum variable defined initia
 139:Core/Src/main.c **** 		checksum = calculate_mandelbrot_fixed_point_arithmetic(width, height, MAX_ITER);
 140:Core/Src/main.c **** 		checksums[i] = checksum;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** 	    //TODO: Record the end time
 143:Core/Src/main.c **** 		end_time = HAL_GetTick();
 144:Core/Src/main.c **** 
 145:Core/Src/main.c **** 		cpuCycle = DWT->CYCCNT;
 146:Core/Src/main.c **** 
 147:Core/Src/main.c **** 		cpuCycles[i] = cpuCycle;
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 4


 148:Core/Src/main.c **** 		//TODO: Calculate the execution time
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** 		execution_time = end_time - start_time;
 151:Core/Src/main.c **** 		execTimes[i] = execution_time;
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** 		totalPixels = (uint64_t)width * height;
 154:Core/Src/main.c **** 		executionSec = (double)execution_time / 1000.0;
 155:Core/Src/main.c **** 		throughput = (double)totalPixels/executionSec;
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** 		throughputs[i] = throughput;
 158:Core/Src/main.c **** 		//TODO: Turn on LED 1 to signify the end of the operation
 159:Core/Src/main.c **** 
 160:Core/Src/main.c **** 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 161:Core/Src/main.c **** 
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** 		//TODO: Hold the LEDs on for a 2s delay
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** 		HAL_Delay(2000);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** 		//TODO: Turn off the LEDs
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** 	}
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   }
 178:Core/Src/main.c ****   /* USER CODE END 3 */
 179:Core/Src/main.c **** }
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** /**
 182:Core/Src/main.c ****   * @brief System Clock Configuration
 183:Core/Src/main.c ****   * @retval None
 184:Core/Src/main.c ****   */
 185:Core/Src/main.c **** void SystemClock_Config(void)
 186:Core/Src/main.c **** {
 187:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 188:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 191:Core/Src/main.c ****   */
 192:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 193:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 196:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 5


 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 207:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 208:Core/Src/main.c ****   {
 209:Core/Src/main.c ****     Error_Handler();
 210:Core/Src/main.c ****   }
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 215:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 216:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 217:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 218:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 219:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 222:Core/Src/main.c ****   {
 223:Core/Src/main.c ****     Error_Handler();
 224:Core/Src/main.c ****   }
 225:Core/Src/main.c **** }
 226:Core/Src/main.c **** 
 227:Core/Src/main.c **** /**
 228:Core/Src/main.c ****   * @brief GPIO Initialization Function
 229:Core/Src/main.c ****   * @param None
 230:Core/Src/main.c ****   * @retval None
 231:Core/Src/main.c ****   */
 232:Core/Src/main.c **** static void MX_GPIO_Init(void)
 233:Core/Src/main.c **** {
  26              		.loc 1 233 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 234:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 234 3 view .LVU1
  40              		.loc 1 234 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0394     		str	r4, [sp, #12]
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
 235:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 240:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 6


  47              		.loc 1 240 3 is_stmt 1 view .LVU3
  48              	.LBB4:
  49              		.loc 1 240 3 view .LVU4
  50 0010 0094     		str	r4, [sp]
  51              		.loc 1 240 3 view .LVU5
  52 0012 184B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F00402 		orr	r2, r2, #4
  55 001a 1A63     		str	r2, [r3, #48]
  56              		.loc 1 240 3 view .LVU6
  57 001c 1A6B     		ldr	r2, [r3, #48]
  58 001e 02F00402 		and	r2, r2, #4
  59 0022 0092     		str	r2, [sp]
  60              		.loc 1 240 3 view .LVU7
  61 0024 009A     		ldr	r2, [sp]
  62              	.LBE4:
  63              		.loc 1 240 3 view .LVU8
 241:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  64              		.loc 1 241 3 view .LVU9
  65              	.LBB5:
  66              		.loc 1 241 3 view .LVU10
  67 0026 0194     		str	r4, [sp, #4]
  68              		.loc 1 241 3 view .LVU11
  69 0028 1A6B     		ldr	r2, [r3, #48]
  70 002a 42F08002 		orr	r2, r2, #128
  71 002e 1A63     		str	r2, [r3, #48]
  72              		.loc 1 241 3 view .LVU12
  73 0030 1A6B     		ldr	r2, [r3, #48]
  74 0032 02F08002 		and	r2, r2, #128
  75 0036 0192     		str	r2, [sp, #4]
  76              		.loc 1 241 3 view .LVU13
  77 0038 019A     		ldr	r2, [sp, #4]
  78              	.LBE5:
  79              		.loc 1 241 3 view .LVU14
 242:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 242 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 242 3 view .LVU16
  83 003a 0294     		str	r4, [sp, #8]
  84              		.loc 1 242 3 view .LVU17
  85 003c 1A6B     		ldr	r2, [r3, #48]
  86 003e 42F00202 		orr	r2, r2, #2
  87 0042 1A63     		str	r2, [r3, #48]
  88              		.loc 1 242 3 view .LVU18
  89 0044 1B6B     		ldr	r3, [r3, #48]
  90 0046 03F00203 		and	r3, r3, #2
  91 004a 0293     		str	r3, [sp, #8]
  92              		.loc 1 242 3 view .LVU19
  93 004c 029B     		ldr	r3, [sp, #8]
  94              	.LBE6:
  95              		.loc 1 242 3 view .LVU20
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 245:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  96              		.loc 1 245 3 view .LVU21
  97 004e 0A4D     		ldr	r5, .L3+4
  98 0050 2246     		mov	r2, r4
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 7


  99 0052 FF21     		movs	r1, #255
 100 0054 2846     		mov	r0, r5
 101 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL0:
 246:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 249:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 250:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 103              		.loc 1 250 3 view .LVU22
 104              		.loc 1 250 23 is_stmt 0 view .LVU23
 105 005a FF23     		movs	r3, #255
 106 005c 0393     		str	r3, [sp, #12]
 251:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 252:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 107              		.loc 1 252 3 is_stmt 1 view .LVU24
 108              		.loc 1 252 24 is_stmt 0 view .LVU25
 109 005e 0123     		movs	r3, #1
 110 0060 0493     		str	r3, [sp, #16]
 253:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 111              		.loc 1 253 3 is_stmt 1 view .LVU26
 112              		.loc 1 253 24 is_stmt 0 view .LVU27
 113 0062 0594     		str	r4, [sp, #20]
 254:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 114              		.loc 1 254 3 is_stmt 1 view .LVU28
 115              		.loc 1 254 25 is_stmt 0 view .LVU29
 116 0064 0694     		str	r4, [sp, #24]
 255:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 117              		.loc 1 255 3 is_stmt 1 view .LVU30
 118 0066 03A9     		add	r1, sp, #12
 119 0068 2846     		mov	r0, r5
 120 006a FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL1:
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 260:Core/Src/main.c **** }
 122              		.loc 1 260 1 is_stmt 0 view .LVU31
 123 006e 09B0     		add	sp, sp, #36
 124              	.LCFI2:
 125              		.cfi_def_cfa_offset 12
 126              		@ sp needed
 127 0070 30BD     		pop	{r4, r5, pc}
 128              	.L4:
 129 0072 00BF     		.align	2
 130              	.L3:
 131 0074 00380240 		.word	1073887232
 132 0078 00040240 		.word	1073873920
 133              		.cfi_endproc
 134              	.LFE136:
 136              		.global	__aeabi_i2d
 137              		.global	__aeabi_dmul
 138              		.global	__aeabi_ddiv
 139              		.global	__aeabi_dsub
 140              		.global	__aeabi_d2iz
 141              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 8


 142              		.align	1
 143              		.global	calculate_mandelbrot_fixed_point_arithmetic
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 148              	calculate_mandelbrot_fixed_point_arithmetic:
 149              	.LVL2:
 150              	.LFB137:
 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 263:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 264:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
 151              		.loc 1 264 96 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 8
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		.loc 1 264 96 is_stmt 0 view .LVU33
 156 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 157              	.LCFI3:
 158              		.cfi_def_cfa_offset 36
 159              		.cfi_offset 4, -36
 160              		.cfi_offset 5, -32
 161              		.cfi_offset 6, -28
 162              		.cfi_offset 7, -24
 163              		.cfi_offset 8, -20
 164              		.cfi_offset 9, -16
 165              		.cfi_offset 10, -12
 166              		.cfi_offset 11, -8
 167              		.cfi_offset 14, -4
 168 0004 83B0     		sub	sp, sp, #12
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 48
 171 0006 8246     		mov	r10, r0
 172 0008 0191     		str	r1, [sp, #4]
 173 000a 1546     		mov	r5, r2
 265:Core/Src/main.c ****   uint64_t mandelbrot_sum = 0;
 174              		.loc 1 265 3 is_stmt 1 view .LVU34
 175              	.LVL3:
 266:Core/Src/main.c ****     //TODO: Complete the function implementation
 267:Core/Src/main.c ****     int x0, xi;
 176              		.loc 1 267 5 view .LVU35
 268:Core/Src/main.c ****     int y0, yi;
 177              		.loc 1 268 5 view .LVU36
 269:Core/Src/main.c ****     int temp;
 178              		.loc 1 269 5 view .LVU37
 270:Core/Src/main.c ****     int iterations;
 179              		.loc 1 270 5 view .LVU38
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** 	#define FixedShift 16
 273:Core/Src/main.c **** 	#define fixed_1 (1 << FixedShift)
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****     for (int y = 0; y < height; y++) {
 180              		.loc 1 275 5 view .LVU39
 181              	.LBB7:
 182              		.loc 1 275 10 view .LVU40
 183              		.loc 1 275 14 is_stmt 0 view .LVU41
 184 000c 0023     		movs	r3, #0
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 9


 185 000e 9B46     		mov	fp, r3
 186 0010 0093     		str	r3, [sp]
 187              	.LBE7:
 265:Core/Src/main.c ****     //TODO: Complete the function implementation
 188              		.loc 1 265 12 view .LVU42
 189 0012 1E46     		mov	r6, r3
 190              	.LBB10:
 191              		.loc 1 275 5 view .LVU43
 192 0014 37E0     		b	.L6
 193              	.LVL4:
 194              	.L9:
 195              	.LBB8:
 276:Core/Src/main.c ****     	y0 = ((y * (2 * fixed_1)) / height) - (fixed_1 * 1);
 277:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 278:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****     		xi = 0;
 282:Core/Src/main.c ****     		yi = 0;
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****     		iterations = 0;
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****     		while ((iterations < max_iterations) && (((xi * xi) >> FixedShift) + ((yi * yi) >> FixedShift
 287:Core/Src/main.c ****     			temp = ((xi * xi) >> FixedShift) - ((yi * yi) >> FixedShift) + x0;
 288:Core/Src/main.c ****     			yi = (((2 * xi * yi) >> FixedShift) + y0);
 289:Core/Src/main.c ****     			xi = temp;
 290:Core/Src/main.c ****     			iterations++;
 291:Core/Src/main.c ****     		}
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****     		mandelbrot_sum += iterations;
 196              		.loc 1 293 7 is_stmt 1 view .LVU44
 197              		.loc 1 293 22 is_stmt 0 view .LVU45
 198 0016 8E19     		adds	r6, r1, r6
 199              	.LVL5:
 200              		.loc 1 293 22 view .LVU46
 201 0018 4BEBE17B 		adc	fp, fp, r1, asr #31
 202              	.LVL6:
 277:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 203              		.loc 1 277 34 is_stmt 1 discriminator 2 view .LVU47
 204 001c 0137     		adds	r7, r7, #1
 205              	.LVL7:
 206              	.L7:
 277:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 207              		.loc 1 277 24 discriminator 1 view .LVU48
 208 001e 5745     		cmp	r7, r10
 209 0020 2EDA     		bge	.L14
 278:Core/Src/main.c **** 
 210              		.loc 1 278 7 view .LVU49
 278:Core/Src/main.c **** 
 211              		.loc 1 278 16 is_stmt 0 view .LVU50
 212 0022 3846     		mov	r0, r7
 213 0024 FFF7FEFF 		bl	__aeabi_i2d
 214              	.LVL8:
 215 0028 0022     		movs	r2, #0
 216 002a 204B     		ldr	r3, .L16
 217 002c FFF7FEFF 		bl	__aeabi_dmul
 218              	.LVL9:
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 10


 219 0030 8046     		mov	r8, r0
 220 0032 8946     		mov	r9, r1
 278:Core/Src/main.c **** 
 221              		.loc 1 278 35 view .LVU51
 222 0034 5046     		mov	r0, r10
 223 0036 FFF7FEFF 		bl	__aeabi_i2d
 224              	.LVL10:
 225 003a 0246     		mov	r2, r0
 226 003c 0B46     		mov	r3, r1
 227 003e 4046     		mov	r0, r8
 228 0040 4946     		mov	r1, r9
 229 0042 FFF7FEFF 		bl	__aeabi_ddiv
 230              	.LVL11:
 278:Core/Src/main.c **** 
 231              		.loc 1 278 44 view .LVU52
 232 0046 0022     		movs	r2, #0
 233 0048 194B     		ldr	r3, .L16+4
 234 004a FFF7FEFF 		bl	__aeabi_dsub
 235              	.LVL12:
 278:Core/Src/main.c **** 
 236              		.loc 1 278 10 view .LVU53
 237 004e FFF7FEFF 		bl	__aeabi_d2iz
 238              	.LVL13:
 281:Core/Src/main.c ****     		yi = 0;
 239              		.loc 1 281 7 is_stmt 1 view .LVU54
 282:Core/Src/main.c **** 
 240              		.loc 1 282 7 view .LVU55
 284:Core/Src/main.c **** 
 241              		.loc 1 284 7 view .LVU56
 286:Core/Src/main.c ****     			temp = ((xi * xi) >> FixedShift) - ((yi * yi) >> FixedShift) + x0;
 242              		.loc 1 286 7 view .LVU57
 284:Core/Src/main.c **** 
 243              		.loc 1 284 18 is_stmt 0 view .LVU58
 244 0052 0021     		movs	r1, #0
 282:Core/Src/main.c **** 
 245              		.loc 1 282 10 view .LVU59
 246 0054 8C46     		mov	ip, r1
 281:Core/Src/main.c ****     		yi = 0;
 247              		.loc 1 281 10 view .LVU60
 248 0056 0B46     		mov	r3, r1
 249              	.LVL14:
 250              	.L8:
 286:Core/Src/main.c ****     			temp = ((xi * xi) >> FixedShift) - ((yi * yi) >> FixedShift) + x0;
 251              		.loc 1 286 44 is_stmt 1 view .LVU61
 252 0058 A942     		cmp	r1, r5
 253 005a DCDA     		bge	.L9
 286:Core/Src/main.c ****     			temp = ((xi * xi) >> FixedShift) - ((yi * yi) >> FixedShift) + x0;
 254              		.loc 1 286 53 is_stmt 0 discriminator 1 view .LVU62
 255 005c 03FB03F2 		mul	r2, r3, r3
 286:Core/Src/main.c ****     			temp = ((xi * xi) >> FixedShift) - ((yi * yi) >> FixedShift) + x0;
 256              		.loc 1 286 59 discriminator 1 view .LVU63
 257 0060 1214     		asrs	r2, r2, #16
 286:Core/Src/main.c ****     			temp = ((xi * xi) >> FixedShift) - ((yi * yi) >> FixedShift) + x0;
 258              		.loc 1 286 81 discriminator 1 view .LVU64
 259 0062 0CFB0CFE 		mul	lr, ip, ip
 286:Core/Src/main.c ****     			temp = ((xi * xi) >> FixedShift) - ((yi * yi) >> FixedShift) + x0;
 260              		.loc 1 286 87 discriminator 1 view .LVU65
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 11


 261 0066 4FEA2E4E 		asr	lr, lr, #16
 287:Core/Src/main.c ****     			yi = (((2 * xi * yi) >> FixedShift) + y0);
 262              		.loc 1 287 8 is_stmt 1 view .LVU66
 287:Core/Src/main.c ****     			yi = (((2 * xi * yi) >> FixedShift) + y0);
 263              		.loc 1 287 41 is_stmt 0 view .LVU67
 264 006a A2EB0E02 		sub	r2, r2, lr
 265              	.LVL15:
 288:Core/Src/main.c ****     			xi = temp;
 266              		.loc 1 288 8 is_stmt 1 view .LVU68
 288:Core/Src/main.c ****     			xi = temp;
 267              		.loc 1 288 23 is_stmt 0 view .LVU69
 268 006e 0CFB03F3 		mul	r3, ip, r3
 269              	.LVL16:
 288:Core/Src/main.c ****     			xi = temp;
 270              		.loc 1 288 29 view .LVU70
 271 0072 43F3CF33 		sbfx	r3, r3, #15, #16
 288:Core/Src/main.c ****     			xi = temp;
 272              		.loc 1 288 11 view .LVU71
 273 0076 03EB040C 		add	ip, r3, r4
 274              	.LVL17:
 289:Core/Src/main.c ****     			iterations++;
 275              		.loc 1 289 8 is_stmt 1 view .LVU72
 290:Core/Src/main.c ****     		}
 276              		.loc 1 290 8 view .LVU73
 290:Core/Src/main.c ****     		}
 277              		.loc 1 290 18 is_stmt 0 view .LVU74
 278 007a 0131     		adds	r1, r1, #1
 279              	.LVL18:
 289:Core/Src/main.c ****     			iterations++;
 280              		.loc 1 289 11 view .LVU75
 281 007c 1318     		adds	r3, r2, r0
 282              	.LVL19:
 289:Core/Src/main.c ****     			iterations++;
 283              		.loc 1 289 11 view .LVU76
 284 007e EBE7     		b	.L8
 285              	.LVL20:
 286              	.L14:
 289:Core/Src/main.c ****     			iterations++;
 287              		.loc 1 289 11 view .LVU77
 288              	.LBE8:
 275:Core/Src/main.c ****     	y0 = ((y * (2 * fixed_1)) / height) - (fixed_1 * 1);
 289              		.loc 1 275 34 is_stmt 1 discriminator 2 view .LVU78
 290 0080 009B     		ldr	r3, [sp]
 291 0082 0133     		adds	r3, r3, #1
 292 0084 0093     		str	r3, [sp]
 293              	.LVL21:
 294              	.L6:
 275:Core/Src/main.c ****     	y0 = ((y * (2 * fixed_1)) / height) - (fixed_1 * 1);
 295              		.loc 1 275 23 discriminator 1 view .LVU79
 296 0086 009B     		ldr	r3, [sp]
 297 0088 019A     		ldr	r2, [sp, #4]
 298 008a 9342     		cmp	r3, r2
 299 008c 08DA     		bge	.L15
 276:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 300              		.loc 1 276 6 view .LVU80
 276:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 301              		.loc 1 276 15 is_stmt 0 view .LVU81
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 12


 302 008e 009B     		ldr	r3, [sp]
 303 0090 5C04     		lsls	r4, r3, #17
 276:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 304              		.loc 1 276 32 view .LVU82
 305 0092 019B     		ldr	r3, [sp, #4]
 306 0094 94FBF3F4 		sdiv	r4, r4, r3
 276:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 307              		.loc 1 276 9 view .LVU83
 308 0098 A4F58034 		sub	r4, r4, #65536
 309              	.LVL22:
 277:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 310              		.loc 1 277 6 is_stmt 1 view .LVU84
 311              	.LBB9:
 277:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 312              		.loc 1 277 11 view .LVU85
 277:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 313              		.loc 1 277 15 is_stmt 0 view .LVU86
 314 009c 0027     		movs	r7, #0
 277:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 315              		.loc 1 277 6 view .LVU87
 316 009e BEE7     		b	.L7
 317              	.LVL23:
 318              	.L15:
 277:Core/Src/main.c ****     		x0 = ((x * (3.5 * fixed_1)) / width) - (fixed_1 * 2.5);
 319              		.loc 1 277 6 view .LVU88
 320              	.LBE9:
 321              	.LBE10:
 294:Core/Src/main.c ****     	}
 295:Core/Src/main.c ****     }
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****     return mandelbrot_sum;
 322              		.loc 1 297 5 is_stmt 1 view .LVU89
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** }
 323              		.loc 1 299 1 is_stmt 0 view .LVU90
 324 00a0 3046     		mov	r0, r6
 325 00a2 5946     		mov	r1, fp
 326 00a4 03B0     		add	sp, sp, #12
 327              	.LCFI5:
 328              		.cfi_def_cfa_offset 36
 329              		@ sp needed
 330 00a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 331              	.LVL24:
 332              	.L17:
 333              		.loc 1 299 1 view .LVU91
 334 00aa 00BF     		.align	2
 335              	.L16:
 336 00ac 00000C41 		.word	1091305472
 337 00b0 00000441 		.word	1090781184
 338              		.cfi_endproc
 339              	.LFE137:
 341              		.global	__aeabi_dadd
 342              		.global	__aeabi_dcmplt
 343              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 344              		.align	1
 345              		.global	calculate_mandelbrot_double
 346              		.syntax unified
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 13


 347              		.thumb
 348              		.thumb_func
 350              	calculate_mandelbrot_double:
 351              	.LVL25:
 352              	.LFB138:
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 302:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 353              		.loc 1 302 80 is_stmt 1 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 56
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357              		.loc 1 302 80 is_stmt 0 view .LVU93
 358 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 359              	.LCFI6:
 360              		.cfi_def_cfa_offset 36
 361              		.cfi_offset 4, -36
 362              		.cfi_offset 5, -32
 363              		.cfi_offset 6, -28
 364              		.cfi_offset 7, -24
 365              		.cfi_offset 8, -20
 366              		.cfi_offset 9, -16
 367              		.cfi_offset 10, -12
 368              		.cfi_offset 11, -8
 369              		.cfi_offset 14, -4
 370 0004 8FB0     		sub	sp, sp, #60
 371              	.LCFI7:
 372              		.cfi_def_cfa_offset 96
 373 0006 0890     		str	r0, [sp, #32]
 303:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 374              		.loc 1 303 5 is_stmt 1 view .LVU94
 375              	.LVL26:
 304:Core/Src/main.c ****     //TODO: Complete the function implementation
 305:Core/Src/main.c ****     double x0, xi;
 376              		.loc 1 305 5 view .LVU95
 306:Core/Src/main.c ****     double y0, yi;
 377              		.loc 1 306 5 view .LVU96
 307:Core/Src/main.c ****     double temp;
 378              		.loc 1 307 5 view .LVU97
 308:Core/Src/main.c ****     int iterations;
 379              		.loc 1 308 5 view .LVU98
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****     for (int y = 0; y < height; y++) {
 380              		.loc 1 310 5 view .LVU99
 381              	.LBB11:
 382              		.loc 1 310 10 view .LVU100
 383              		.loc 1 310 14 is_stmt 0 view .LVU101
 384 0008 4FF0000C 		mov	ip, #0
 385              	.LBE11:
 303:Core/Src/main.c ****     //TODO: Complete the function implementation
 386              		.loc 1 303 14 view .LVU102
 387 000c CDF824C0 		str	ip, [sp, #36]
 388 0010 0C91     		str	r1, [sp, #48]
 389 0012 E346     		mov	fp, ip
 390 0014 0D92     		str	r2, [sp, #52]
 391 0016 CDF828C0 		str	ip, [sp, #40]
 392              	.LBB14:
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 14


 393              		.loc 1 310 5 view .LVU103
 394 001a 85E0     		b	.L19
 395              	.LVL27:
 396              	.L22:
 397              	.LBB12:
 311:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 312:Core/Src/main.c ****     		x0 = ((x / (double)width) * 3.5) - 2.5;
 313:Core/Src/main.c ****        		y0 = ((y / (double)height) * 2.0) - 1.0;
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****        		xi = 0.0;
 316:Core/Src/main.c ****        		yi = 0.0;
 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****        		iterations = 0;
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****        		while ((iterations < max_iterations) && ((xi * xi + yi * yi) < 4.0)) {
 321:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 398              		.loc 1 321 11 is_stmt 1 view .LVU104
 399              		.loc 1 321 16 is_stmt 0 view .LVU105
 400 001c 4246     		mov	r2, r8
 401 001e 4B46     		mov	r3, r9
 402 0020 DDE90001 		ldrd	r0, [sp]
 403 0024 FFF7FEFF 		bl	__aeabi_dsub
 404              	.LVL28:
 405 0028 8046     		mov	r8, r0
 406 002a 8946     		mov	r9, r1
 407              	.LVL29:
 322:Core/Src/main.c ****        			yi = (2.0* xi * yi) + y0;
 408              		.loc 1 322 11 is_stmt 1 view .LVU106
 409              		.loc 1 322 20 is_stmt 0 view .LVU107
 410 002c 2246     		mov	r2, r4
 411 002e 2B46     		mov	r3, r5
 412 0030 2046     		mov	r0, r4
 413 0032 2946     		mov	r1, r5
 414 0034 FFF7FEFF 		bl	__aeabi_dadd
 415              	.LVL30:
 416              		.loc 1 322 25 view .LVU108
 417 0038 5246     		mov	r2, r10
 418 003a 5B46     		mov	r3, fp
 419 003c FFF7FEFF 		bl	__aeabi_dmul
 420              	.LVL31:
 421              		.loc 1 322 14 view .LVU109
 422 0040 DDE90423 		ldrd	r2, [sp, #16]
 423 0044 FFF7FEFF 		bl	__aeabi_dadd
 424              	.LVL32:
 425 0048 8246     		mov	r10, r0
 426              	.LVL33:
 427              		.loc 1 322 14 view .LVU110
 428 004a 8B46     		mov	fp, r1
 429              	.LVL34:
 323:Core/Src/main.c ****        			xi = temp + x0;
 430              		.loc 1 323 11 is_stmt 1 view .LVU111
 431              		.loc 1 323 14 is_stmt 0 view .LVU112
 432 004c 4246     		mov	r2, r8
 433 004e 4B46     		mov	r3, r9
 434 0050 DDE90201 		ldrd	r0, [sp, #8]
 435 0054 FFF7FEFF 		bl	__aeabi_dadd
 436              	.LVL35:
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 15


 437 0058 0446     		mov	r4, r0
 438              	.LVL36:
 439              		.loc 1 323 14 view .LVU113
 440 005a 0D46     		mov	r5, r1
 441              	.LVL37:
 324:Core/Src/main.c ****        			iterations++;
 442              		.loc 1 324 11 is_stmt 1 view .LVU114
 443              		.loc 1 324 21 is_stmt 0 view .LVU115
 444 005c 0136     		adds	r6, r6, #1
 445              	.LVL38:
 446              	.L20:
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 447              		.loc 1 320 47 is_stmt 1 view .LVU116
 448 005e BE42     		cmp	r6, r7
 449 0060 1BDA     		bge	.L21
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 450              		.loc 1 320 55 is_stmt 0 discriminator 1 view .LVU117
 451 0062 2246     		mov	r2, r4
 452 0064 2B46     		mov	r3, r5
 453 0066 2046     		mov	r0, r4
 454 0068 2946     		mov	r1, r5
 455 006a FFF7FEFF 		bl	__aeabi_dmul
 456              	.LVL39:
 457 006e CDE90001 		strd	r0, [sp]
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 458              		.loc 1 320 65 discriminator 1 view .LVU118
 459 0072 5246     		mov	r2, r10
 460 0074 5B46     		mov	r3, fp
 461 0076 5046     		mov	r0, r10
 462 0078 5946     		mov	r1, fp
 463 007a FFF7FEFF 		bl	__aeabi_dmul
 464              	.LVL40:
 465 007e 8046     		mov	r8, r0
 466 0080 8946     		mov	r9, r1
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 467              		.loc 1 320 60 discriminator 1 view .LVU119
 468 0082 0246     		mov	r2, r0
 469 0084 0B46     		mov	r3, r1
 470 0086 DDE90001 		ldrd	r0, [sp]
 471 008a FFF7FEFF 		bl	__aeabi_dadd
 472              	.LVL41:
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 473              		.loc 1 320 47 discriminator 1 view .LVU120
 474 008e 0022     		movs	r2, #0
 475 0090 2D4B     		ldr	r3, .L29
 476 0092 FFF7FEFF 		bl	__aeabi_dcmplt
 477              	.LVL42:
 478 0096 0028     		cmp	r0, #0
 479 0098 C0D1     		bne	.L22
 480              	.L21:
 325:Core/Src/main.c ****        		}
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****        		mandelbrot_sum +=iterations;
 481              		.loc 1 327 10 is_stmt 1 view .LVU121
 482              		.loc 1 327 25 is_stmt 0 view .LVU122
 483 009a 0A9B     		ldr	r3, [sp, #40]
 484 009c F218     		adds	r2, r6, r3
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 16


 485 009e 0A92     		str	r2, [sp, #40]
 486              	.LVL43:
 487              		.loc 1 327 25 view .LVU123
 488 00a0 099B     		ldr	r3, [sp, #36]
 489 00a2 43EBE673 		adc	r3, r3, r6, asr #31
 490 00a6 0993     		str	r3, [sp, #36]
 491              	.LVL44:
 311:Core/Src/main.c ****     		x0 = ((x / (double)width) * 3.5) - 2.5;
 492              		.loc 1 311 34 is_stmt 1 discriminator 2 view .LVU124
 493 00a8 079B     		ldr	r3, [sp, #28]
 494              	.LVL45:
 311:Core/Src/main.c ****     		x0 = ((x / (double)width) * 3.5) - 2.5;
 495              		.loc 1 311 34 is_stmt 0 discriminator 2 view .LVU125
 496 00aa 0133     		adds	r3, r3, #1
 497 00ac 0793     		str	r3, [sp, #28]
 498              	.LVL46:
 499              	.L24:
 311:Core/Src/main.c ****     		x0 = ((x / (double)width) * 3.5) - 2.5;
 500              		.loc 1 311 24 is_stmt 1 discriminator 1 view .LVU126
 501 00ae 079B     		ldr	r3, [sp, #28]
 502 00b0 089A     		ldr	r2, [sp, #32]
 503 00b2 9342     		cmp	r3, r2
 504 00b4 34DA     		bge	.L27
 312:Core/Src/main.c ****        		y0 = ((y / (double)height) * 2.0) - 1.0;
 505              		.loc 1 312 7 view .LVU127
 312:Core/Src/main.c ****        		y0 = ((y / (double)height) * 2.0) - 1.0;
 506              		.loc 1 312 18 is_stmt 0 view .LVU128
 507 00b6 0898     		ldr	r0, [sp, #32]
 508 00b8 FFF7FEFF 		bl	__aeabi_i2d
 509              	.LVL47:
 510 00bc 0446     		mov	r4, r0
 511 00be 0D46     		mov	r5, r1
 312:Core/Src/main.c ****        		y0 = ((y / (double)height) * 2.0) - 1.0;
 512              		.loc 1 312 16 view .LVU129
 513 00c0 0798     		ldr	r0, [sp, #28]
 514 00c2 FFF7FEFF 		bl	__aeabi_i2d
 515              	.LVL48:
 516 00c6 2246     		mov	r2, r4
 517 00c8 2B46     		mov	r3, r5
 518 00ca FFF7FEFF 		bl	__aeabi_ddiv
 519              	.LVL49:
 312:Core/Src/main.c ****        		y0 = ((y / (double)height) * 2.0) - 1.0;
 520              		.loc 1 312 33 view .LVU130
 521 00ce 0022     		movs	r2, #0
 522 00d0 1E4B     		ldr	r3, .L29+4
 523 00d2 FFF7FEFF 		bl	__aeabi_dmul
 524              	.LVL50:
 312:Core/Src/main.c ****        		y0 = ((y / (double)height) * 2.0) - 1.0;
 525              		.loc 1 312 10 view .LVU131
 526 00d6 0022     		movs	r2, #0
 527 00d8 1D4B     		ldr	r3, .L29+8
 528 00da FFF7FEFF 		bl	__aeabi_dsub
 529              	.LVL51:
 530 00de CDE90201 		strd	r0, [sp, #8]
 531              	.LVL52:
 313:Core/Src/main.c **** 
 532              		.loc 1 313 10 is_stmt 1 view .LVU132
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 17


 313:Core/Src/main.c **** 
 533              		.loc 1 313 21 is_stmt 0 view .LVU133
 534 00e2 0C98     		ldr	r0, [sp, #48]
 535              	.LVL53:
 313:Core/Src/main.c **** 
 536              		.loc 1 313 21 view .LVU134
 537 00e4 FFF7FEFF 		bl	__aeabi_i2d
 538              	.LVL54:
 539 00e8 0446     		mov	r4, r0
 540 00ea 0D46     		mov	r5, r1
 313:Core/Src/main.c **** 
 541              		.loc 1 313 19 view .LVU135
 542 00ec 0B98     		ldr	r0, [sp, #44]
 543 00ee FFF7FEFF 		bl	__aeabi_i2d
 544              	.LVL55:
 545 00f2 2246     		mov	r2, r4
 546 00f4 2B46     		mov	r3, r5
 547 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 548              	.LVL56:
 549 00fa 0246     		mov	r2, r0
 550 00fc 0B46     		mov	r3, r1
 313:Core/Src/main.c **** 
 551              		.loc 1 313 37 view .LVU136
 552 00fe FFF7FEFF 		bl	__aeabi_dadd
 553              	.LVL57:
 313:Core/Src/main.c **** 
 554              		.loc 1 313 13 view .LVU137
 555 0102 0022     		movs	r2, #0
 556 0104 134B     		ldr	r3, .L29+12
 557 0106 FFF7FEFF 		bl	__aeabi_dsub
 558              	.LVL58:
 559 010a CDE90401 		strd	r0, [sp, #16]
 560              	.LVL59:
 315:Core/Src/main.c ****        		yi = 0.0;
 561              		.loc 1 315 10 is_stmt 1 view .LVU138
 316:Core/Src/main.c **** 
 562              		.loc 1 316 10 view .LVU139
 318:Core/Src/main.c **** 
 563              		.loc 1 318 10 view .LVU140
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 564              		.loc 1 320 10 view .LVU141
 318:Core/Src/main.c **** 
 565              		.loc 1 318 21 is_stmt 0 view .LVU142
 566 010e 0026     		movs	r6, #0
 316:Core/Src/main.c **** 
 567              		.loc 1 316 13 view .LVU143
 568 0110 4FF0000A 		mov	r10, #0
 569 0114 4FF0000B 		mov	fp, #0
 315:Core/Src/main.c ****        		yi = 0.0;
 570              		.loc 1 315 13 view .LVU144
 571 0118 5446     		mov	r4, r10
 572 011a 5D46     		mov	r5, fp
 573 011c 0D9F     		ldr	r7, [sp, #52]
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 574              		.loc 1 320 16 view .LVU145
 575 011e 9EE7     		b	.L20
 576              	.LVL60:
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 18


 577              	.L27:
 320:Core/Src/main.c ****        			temp = (xi * xi) - (yi * yi);
 578              		.loc 1 320 16 view .LVU146
 579              	.LBE12:
 310:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 580              		.loc 1 310 34 discriminator 2 view .LVU147
 581 0120 DDF82CB0 		ldr	fp, [sp, #44]
 310:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 582              		.loc 1 310 34 is_stmt 1 discriminator 2 view .LVU148
 583 0124 0BF1010B 		add	fp, fp, #1
 584              	.LVL61:
 585              	.L19:
 310:Core/Src/main.c ****     	for (int x = 0; x < width; x++){
 586              		.loc 1 310 23 discriminator 1 view .LVU149
 587 0128 0C9B     		ldr	r3, [sp, #48]
 588 012a 9B45     		cmp	fp, r3
 589 012c 04DA     		bge	.L28
 590              	.LBB13:
 311:Core/Src/main.c ****     		x0 = ((x / (double)width) * 3.5) - 2.5;
 591              		.loc 1 311 15 is_stmt 0 view .LVU150
 592 012e 0023     		movs	r3, #0
 593 0130 0793     		str	r3, [sp, #28]
 594 0132 CDF82CB0 		str	fp, [sp, #44]
 595 0136 BAE7     		b	.L24
 596              	.L28:
 311:Core/Src/main.c ****     		x0 = ((x / (double)width) * 3.5) - 2.5;
 597              		.loc 1 311 15 view .LVU151
 598              	.LBE13:
 599              	.LBE14:
 328:Core/Src/main.c ****        }
 329:Core/Src/main.c ****     }
 330:Core/Src/main.c ****     return mandelbrot_sum;
 331:Core/Src/main.c **** }
 600              		.loc 1 331 1 view .LVU152
 601 0138 DDF828A0 		ldr	r10, [sp, #40]
 330:Core/Src/main.c **** }
 602              		.loc 1 330 5 is_stmt 1 view .LVU153
 603              		.loc 1 331 1 is_stmt 0 view .LVU154
 604 013c 5046     		mov	r0, r10
 605 013e 0999     		ldr	r1, [sp, #36]
 606 0140 0FB0     		add	sp, sp, #60
 607              	.LCFI8:
 608              		.cfi_def_cfa_offset 36
 609              		@ sp needed
 610 0142 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 611              	.LVL62:
 612              	.L30:
 613              		.loc 1 331 1 view .LVU155
 614 0146 00BF     		.align	2
 615              	.L29:
 616 0148 00001040 		.word	1074790400
 617 014c 00000C40 		.word	1074528256
 618 0150 00000440 		.word	1074003968
 619 0154 0000F03F 		.word	1072693248
 620              		.cfi_endproc
 621              	.LFE138:
 623              		.section	.text.Error_Handler,"ax",%progbits
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 19


 624              		.align	1
 625              		.global	Error_Handler
 626              		.syntax unified
 627              		.thumb
 628              		.thumb_func
 630              	Error_Handler:
 631              	.LFB139:
 332:Core/Src/main.c **** 
 333:Core/Src/main.c **** /* USER CODE END 4 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c **** /**
 336:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 337:Core/Src/main.c ****   * @retval None
 338:Core/Src/main.c ****   */
 339:Core/Src/main.c **** void Error_Handler(void)
 340:Core/Src/main.c **** {
 632              		.loc 1 340 1 is_stmt 1 view -0
 633              		.cfi_startproc
 634              		@ Volatile: function does not return.
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 341:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 342:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 343:Core/Src/main.c ****   __disable_irq();
 638              		.loc 1 343 3 view .LVU157
 639              	.LBB15:
 640              	.LBI15:
 641              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 20


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 21


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 22


 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 23


 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 24


 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 25


 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 26


 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 27


 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 28


 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 29


 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 30


 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 31


 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 32


 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 33


 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 34


 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 35


 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 36


 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 642              		.loc 2 960 27 view .LVU158
 643              	.LBB16:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 644              		.loc 2 962 3 view .LVU159
 645              		.syntax unified
 646              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 647 0000 72B6     		cpsid i
 648              	@ 0 "" 2
 649              		.thumb
 650              		.syntax unified
 651              	.L32:
 652              	.LBE16:
 653              	.LBE15:
 344:Core/Src/main.c ****   while (1)
 654              		.loc 1 344 3 view .LVU160
 345:Core/Src/main.c ****   {
 346:Core/Src/main.c ****   }
 655              		.loc 1 346 3 view .LVU161
 344:Core/Src/main.c ****   while (1)
 656              		.loc 1 344 9 view .LVU162
 657 0002 FEE7     		b	.L32
 658              		.cfi_endproc
 659              	.LFE139:
 661              		.section	.text.SystemClock_Config,"ax",%progbits
 662              		.align	1
 663              		.global	SystemClock_Config
 664              		.syntax unified
 665              		.thumb
 666              		.thumb_func
 668              	SystemClock_Config:
 669              	.LFB135:
 186:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 670              		.loc 1 186 1 view -0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 80
 673              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 37


 674 0000 00B5     		push	{lr}
 675              	.LCFI9:
 676              		.cfi_def_cfa_offset 4
 677              		.cfi_offset 14, -4
 678 0002 95B0     		sub	sp, sp, #84
 679              	.LCFI10:
 680              		.cfi_def_cfa_offset 88
 187:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 681              		.loc 1 187 3 view .LVU164
 187:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 682              		.loc 1 187 22 is_stmt 0 view .LVU165
 683 0004 3422     		movs	r2, #52
 684 0006 0021     		movs	r1, #0
 685 0008 07A8     		add	r0, sp, #28
 686 000a FFF7FEFF 		bl	memset
 687              	.LVL63:
 188:Core/Src/main.c **** 
 688              		.loc 1 188 3 is_stmt 1 view .LVU166
 188:Core/Src/main.c **** 
 689              		.loc 1 188 22 is_stmt 0 view .LVU167
 690 000e 0023     		movs	r3, #0
 691 0010 0293     		str	r3, [sp, #8]
 692 0012 0393     		str	r3, [sp, #12]
 693 0014 0493     		str	r3, [sp, #16]
 694 0016 0593     		str	r3, [sp, #20]
 695 0018 0693     		str	r3, [sp, #24]
 192:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 696              		.loc 1 192 3 is_stmt 1 view .LVU168
 697              	.LBB17:
 192:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 698              		.loc 1 192 3 view .LVU169
 699 001a 0093     		str	r3, [sp]
 192:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 700              		.loc 1 192 3 view .LVU170
 701 001c 214A     		ldr	r2, .L39
 702 001e 116C     		ldr	r1, [r2, #64]
 703 0020 41F08051 		orr	r1, r1, #268435456
 704 0024 1164     		str	r1, [r2, #64]
 192:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 705              		.loc 1 192 3 view .LVU171
 706 0026 126C     		ldr	r2, [r2, #64]
 707 0028 02F08052 		and	r2, r2, #268435456
 708 002c 0092     		str	r2, [sp]
 192:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 709              		.loc 1 192 3 view .LVU172
 710 002e 009A     		ldr	r2, [sp]
 711              	.LBE17:
 192:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 712              		.loc 1 192 3 view .LVU173
 193:Core/Src/main.c **** 
 713              		.loc 1 193 3 view .LVU174
 714              	.LBB18:
 193:Core/Src/main.c **** 
 715              		.loc 1 193 3 view .LVU175
 716 0030 0193     		str	r3, [sp, #4]
 193:Core/Src/main.c **** 
 717              		.loc 1 193 3 view .LVU176
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 38


 718 0032 1D4A     		ldr	r2, .L39+4
 719 0034 1368     		ldr	r3, [r2]
 720 0036 23F44043 		bic	r3, r3, #49152
 721 003a 43F48043 		orr	r3, r3, #16384
 722 003e 1360     		str	r3, [r2]
 193:Core/Src/main.c **** 
 723              		.loc 1 193 3 view .LVU177
 724 0040 1368     		ldr	r3, [r2]
 725 0042 03F44043 		and	r3, r3, #49152
 726 0046 0193     		str	r3, [sp, #4]
 193:Core/Src/main.c **** 
 727              		.loc 1 193 3 view .LVU178
 728 0048 019B     		ldr	r3, [sp, #4]
 729              	.LBE18:
 193:Core/Src/main.c **** 
 730              		.loc 1 193 3 view .LVU179
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 731              		.loc 1 198 3 view .LVU180
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 732              		.loc 1 198 36 is_stmt 0 view .LVU181
 733 004a 0123     		movs	r3, #1
 734 004c 0793     		str	r3, [sp, #28]
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 735              		.loc 1 199 3 is_stmt 1 view .LVU182
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 736              		.loc 1 199 30 is_stmt 0 view .LVU183
 737 004e 4FF48033 		mov	r3, #65536
 738 0052 0893     		str	r3, [sp, #32]
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 739              		.loc 1 200 3 is_stmt 1 view .LVU184
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 740              		.loc 1 200 34 is_stmt 0 view .LVU185
 741 0054 0223     		movs	r3, #2
 742 0056 0D93     		str	r3, [sp, #52]
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 743              		.loc 1 201 3 is_stmt 1 view .LVU186
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 744              		.loc 1 201 35 is_stmt 0 view .LVU187
 745 0058 4FF48002 		mov	r2, #4194304
 746 005c 0E92     		str	r2, [sp, #56]
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 747              		.loc 1 202 3 is_stmt 1 view .LVU188
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 748              		.loc 1 202 30 is_stmt 0 view .LVU189
 749 005e 0F22     		movs	r2, #15
 750 0060 0F92     		str	r2, [sp, #60]
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 751              		.loc 1 203 3 is_stmt 1 view .LVU190
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 752              		.loc 1 203 30 is_stmt 0 view .LVU191
 753 0062 9022     		movs	r2, #144
 754 0064 1092     		str	r2, [sp, #64]
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 755              		.loc 1 204 3 is_stmt 1 view .LVU192
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 756              		.loc 1 204 30 is_stmt 0 view .LVU193
 757 0066 1193     		str	r3, [sp, #68]
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 39


 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 758              		.loc 1 205 3 is_stmt 1 view .LVU194
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 759              		.loc 1 205 30 is_stmt 0 view .LVU195
 760 0068 1293     		str	r3, [sp, #72]
 206:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 761              		.loc 1 206 3 is_stmt 1 view .LVU196
 206:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 762              		.loc 1 206 30 is_stmt 0 view .LVU197
 763 006a 1393     		str	r3, [sp, #76]
 207:Core/Src/main.c ****   {
 764              		.loc 1 207 3 is_stmt 1 view .LVU198
 207:Core/Src/main.c ****   {
 765              		.loc 1 207 7 is_stmt 0 view .LVU199
 766 006c 07A8     		add	r0, sp, #28
 767 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 768              	.LVL64:
 207:Core/Src/main.c ****   {
 769              		.loc 1 207 6 discriminator 1 view .LVU200
 770 0072 98B9     		cbnz	r0, .L37
 214:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 771              		.loc 1 214 3 is_stmt 1 view .LVU201
 214:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 772              		.loc 1 214 31 is_stmt 0 view .LVU202
 773 0074 0F23     		movs	r3, #15
 774 0076 0293     		str	r3, [sp, #8]
 216:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 775              		.loc 1 216 3 is_stmt 1 view .LVU203
 216:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 776              		.loc 1 216 34 is_stmt 0 view .LVU204
 777 0078 0223     		movs	r3, #2
 778 007a 0393     		str	r3, [sp, #12]
 217:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 779              		.loc 1 217 3 is_stmt 1 view .LVU205
 217:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 780              		.loc 1 217 35 is_stmt 0 view .LVU206
 781 007c 0023     		movs	r3, #0
 782 007e 0493     		str	r3, [sp, #16]
 218:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 783              		.loc 1 218 3 is_stmt 1 view .LVU207
 218:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 784              		.loc 1 218 36 is_stmt 0 view .LVU208
 785 0080 4FF4A053 		mov	r3, #5120
 786 0084 0593     		str	r3, [sp, #20]
 219:Core/Src/main.c **** 
 787              		.loc 1 219 3 is_stmt 1 view .LVU209
 219:Core/Src/main.c **** 
 788              		.loc 1 219 36 is_stmt 0 view .LVU210
 789 0086 4FF48053 		mov	r3, #4096
 790 008a 0693     		str	r3, [sp, #24]
 221:Core/Src/main.c ****   {
 791              		.loc 1 221 3 is_stmt 1 view .LVU211
 221:Core/Src/main.c ****   {
 792              		.loc 1 221 7 is_stmt 0 view .LVU212
 793 008c 0321     		movs	r1, #3
 794 008e 02A8     		add	r0, sp, #8
 795 0090 FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 40


 796              	.LVL65:
 221:Core/Src/main.c ****   {
 797              		.loc 1 221 6 discriminator 1 view .LVU213
 798 0094 20B9     		cbnz	r0, .L38
 225:Core/Src/main.c **** 
 799              		.loc 1 225 1 view .LVU214
 800 0096 15B0     		add	sp, sp, #84
 801              	.LCFI11:
 802              		.cfi_remember_state
 803              		.cfi_def_cfa_offset 4
 804              		@ sp needed
 805 0098 5DF804FB 		ldr	pc, [sp], #4
 806              	.L37:
 807              	.LCFI12:
 808              		.cfi_restore_state
 209:Core/Src/main.c ****   }
 809              		.loc 1 209 5 is_stmt 1 view .LVU215
 810 009c FFF7FEFF 		bl	Error_Handler
 811              	.LVL66:
 812              	.L38:
 223:Core/Src/main.c ****   }
 813              		.loc 1 223 5 view .LVU216
 814 00a0 FFF7FEFF 		bl	Error_Handler
 815              	.LVL67:
 816              	.L40:
 817              		.align	2
 818              	.L39:
 819 00a4 00380240 		.word	1073887232
 820 00a8 00700040 		.word	1073770496
 821              		.cfi_endproc
 822              	.LFE135:
 824              		.global	__aeabi_ui2d
 825              		.global	__aeabi_ul2d
 826              		.section	.text.main,"ax",%progbits
 827              		.align	1
 828              		.global	main
 829              		.syntax unified
 830              		.thumb
 831              		.thumb_func
 833              	main:
 834              	.LFB134:
  89:Core/Src/main.c **** 
 835              		.loc 1 89 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 840              	.LCFI13:
 841              		.cfi_def_cfa_offset 40
 842              		.cfi_offset 3, -40
 843              		.cfi_offset 4, -36
 844              		.cfi_offset 5, -32
 845              		.cfi_offset 6, -28
 846              		.cfi_offset 7, -24
 847              		.cfi_offset 8, -20
 848              		.cfi_offset 9, -16
 849              		.cfi_offset 10, -12
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 41


 850              		.cfi_offset 11, -8
 851              		.cfi_offset 14, -4
  98:Core/Src/main.c **** 
 852              		.loc 1 98 3 view .LVU218
 853 0004 FFF7FEFF 		bl	HAL_Init
 854              	.LVL68:
 105:Core/Src/main.c **** 
 855              		.loc 1 105 3 view .LVU219
 856 0008 FFF7FEFF 		bl	SystemClock_Config
 857              	.LVL69:
 112:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 858              		.loc 1 112 3 view .LVU220
 859 000c FFF7FEFF 		bl	MX_GPIO_Init
 860              	.LVL70:
 114:Core/Src/main.c ****   DWT->CYCCNT = 0;
 861              		.loc 1 114 3 view .LVU221
 114:Core/Src/main.c ****   DWT->CYCCNT = 0;
 862              		.loc 1 114 12 is_stmt 0 view .LVU222
 863 0010 424A     		ldr	r2, .L46
 864 0012 D2F8FC30 		ldr	r3, [r2, #252]
 114:Core/Src/main.c ****   DWT->CYCCNT = 0;
 865              		.loc 1 114 20 view .LVU223
 866 0016 43F08073 		orr	r3, r3, #16777216
 867 001a C2F8FC30 		str	r3, [r2, #252]
 115:Core/Src/main.c ****   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 868              		.loc 1 115 3 is_stmt 1 view .LVU224
 115:Core/Src/main.c ****   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 869              		.loc 1 115 15 is_stmt 0 view .LVU225
 870 001e 404B     		ldr	r3, .L46+4
 871 0020 0022     		movs	r2, #0
 872 0022 5A60     		str	r2, [r3, #4]
 116:Core/Src/main.c ****   /* USER CODE END 2 */
 873              		.loc 1 116 3 is_stmt 1 view .LVU226
 116:Core/Src/main.c ****   /* USER CODE END 2 */
 874              		.loc 1 116 6 is_stmt 0 view .LVU227
 875 0024 1A68     		ldr	r2, [r3]
 116:Core/Src/main.c ****   /* USER CODE END 2 */
 876              		.loc 1 116 13 view .LVU228
 877 0026 42F00102 		orr	r2, r2, #1
 878 002a 1A60     		str	r2, [r3]
 879 002c 73E0     		b	.L44
 880              	.LVL71:
 881              	.L43:
 882              	.LBB19:
 883              	.LBB20:
 128:Core/Src/main.c **** 		int height = heights[i];
 884              		.loc 1 128 3 is_stmt 1 view .LVU229
 128:Core/Src/main.c **** 		int height = heights[i];
 885              		.loc 1 128 7 is_stmt 0 view .LVU230
 886 002e 3D4B     		ldr	r3, .L46+8
 887 0030 53F82480 		ldr	r8, [r3, r4, lsl #2]
 888              	.LVL72:
 129:Core/Src/main.c **** 
 889              		.loc 1 129 3 is_stmt 1 view .LVU231
 129:Core/Src/main.c **** 
 890              		.loc 1 129 7 is_stmt 0 view .LVU232
 891 0034 3C4B     		ldr	r3, .L46+12
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 42


 892 0036 53F82460 		ldr	r6, [r3, r4, lsl #2]
 893              	.LVL73:
 132:Core/Src/main.c **** 
 894              		.loc 1 132 6 is_stmt 1 view .LVU233
 895 003a 3C4F     		ldr	r7, .L46+16
 896 003c 0122     		movs	r2, #1
 897 003e 1146     		mov	r1, r2
 898 0040 3846     		mov	r0, r7
 899 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 900              	.LVL74:
 134:Core/Src/main.c **** 		//TODO: Record the start time
 901              		.loc 1 134 3 view .LVU234
 134:Core/Src/main.c **** 		//TODO: Record the start time
 902              		.loc 1 134 15 is_stmt 0 view .LVU235
 903 0046 DFF8D890 		ldr	r9, .L46+4
 904 004a 4FF0000A 		mov	r10, #0
 905 004e C9F804A0 		str	r10, [r9, #4]
 136:Core/Src/main.c **** 
 906              		.loc 1 136 3 is_stmt 1 view .LVU236
 136:Core/Src/main.c **** 
 907              		.loc 1 136 16 is_stmt 0 view .LVU237
 908 0052 FFF7FEFF 		bl	HAL_GetTick
 909              	.LVL75:
 136:Core/Src/main.c **** 
 910              		.loc 1 136 14 discriminator 1 view .LVU238
 911 0056 364D     		ldr	r5, .L46+20
 912 0058 2860     		str	r0, [r5]
 139:Core/Src/main.c **** 		checksums[i] = checksum;
 913              		.loc 1 139 3 is_stmt 1 view .LVU239
 139:Core/Src/main.c **** 		checksums[i] = checksum;
 914              		.loc 1 139 14 is_stmt 0 view .LVU240
 915 005a 6422     		movs	r2, #100
 916 005c 3146     		mov	r1, r6
 917 005e 4046     		mov	r0, r8
 918 0060 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 919              	.LVL76:
 139:Core/Src/main.c **** 		checksums[i] = checksum;
 920              		.loc 1 139 12 discriminator 1 view .LVU241
 921 0064 334B     		ldr	r3, .L46+24
 922 0066 1860     		str	r0, [r3]
 923 0068 5960     		str	r1, [r3, #4]
 140:Core/Src/main.c **** 
 924              		.loc 1 140 3 is_stmt 1 view .LVU242
 140:Core/Src/main.c **** 
 925              		.loc 1 140 16 is_stmt 0 view .LVU243
 926 006a 4FEAC40B 		lsl	fp, r4, #3
 927 006e 324B     		ldr	r3, .L46+28
 928 0070 03EBC403 		add	r3, r3, r4, lsl #3
 929 0074 1860     		str	r0, [r3]
 930 0076 5960     		str	r1, [r3, #4]
 143:Core/Src/main.c **** 
 931              		.loc 1 143 3 is_stmt 1 view .LVU244
 143:Core/Src/main.c **** 
 932              		.loc 1 143 14 is_stmt 0 view .LVU245
 933 0078 FFF7FEFF 		bl	HAL_GetTick
 934              	.LVL77:
 143:Core/Src/main.c **** 
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 43


 935              		.loc 1 143 12 discriminator 1 view .LVU246
 936 007c 2F4B     		ldr	r3, .L46+32
 937 007e 1860     		str	r0, [r3]
 145:Core/Src/main.c **** 
 938              		.loc 1 145 3 is_stmt 1 view .LVU247
 145:Core/Src/main.c **** 
 939              		.loc 1 145 17 is_stmt 0 view .LVU248
 940 0080 D9F80430 		ldr	r3, [r9, #4]
 145:Core/Src/main.c **** 
 941              		.loc 1 145 12 view .LVU249
 942 0084 2E4A     		ldr	r2, .L46+36
 943 0086 1360     		str	r3, [r2]
 147:Core/Src/main.c **** 		//TODO: Calculate the execution time
 944              		.loc 1 147 3 is_stmt 1 view .LVU250
 147:Core/Src/main.c **** 		//TODO: Calculate the execution time
 945              		.loc 1 147 16 is_stmt 0 view .LVU251
 946 0088 2E4A     		ldr	r2, .L46+40
 947 008a 42F82430 		str	r3, [r2, r4, lsl #2]
 150:Core/Src/main.c **** 		execTimes[i] = execution_time;
 948              		.loc 1 150 3 is_stmt 1 view .LVU252
 150:Core/Src/main.c **** 		execTimes[i] = execution_time;
 949              		.loc 1 150 29 is_stmt 0 view .LVU253
 950 008e 2B68     		ldr	r3, [r5]
 951 0090 C01A     		subs	r0, r0, r3
 150:Core/Src/main.c **** 		execTimes[i] = execution_time;
 952              		.loc 1 150 18 view .LVU254
 953 0092 2D4B     		ldr	r3, .L46+44
 954 0094 1860     		str	r0, [r3]
 151:Core/Src/main.c **** 
 955              		.loc 1 151 3 is_stmt 1 view .LVU255
 151:Core/Src/main.c **** 
 956              		.loc 1 151 16 is_stmt 0 view .LVU256
 957 0096 2D4B     		ldr	r3, .L46+48
 958 0098 43F82400 		str	r0, [r3, r4, lsl #2]
 153:Core/Src/main.c **** 		executionSec = (double)execution_time / 1000.0;
 959              		.loc 1 153 3 is_stmt 1 view .LVU257
 153:Core/Src/main.c **** 		executionSec = (double)execution_time / 1000.0;
 960              		.loc 1 153 17 is_stmt 0 view .LVU258
 961 009c 4FEAE875 		asr	r5, r8, #31
 153:Core/Src/main.c **** 		executionSec = (double)execution_time / 1000.0;
 962              		.loc 1 153 33 view .LVU259
 963 00a0 F317     		asrs	r3, r6, #31
 964 00a2 06FB05F5 		mul	r5, r6, r5
 965 00a6 08FB0355 		mla	r5, r8, r3, r5
 966 00aa A6FB0863 		umull	r6, r3, r6, r8
 967              	.LVL78:
 153:Core/Src/main.c **** 		executionSec = (double)execution_time / 1000.0;
 968              		.loc 1 153 33 view .LVU260
 969 00ae 1D44     		add	r5, r5, r3
 153:Core/Src/main.c **** 		executionSec = (double)execution_time / 1000.0;
 970              		.loc 1 153 15 view .LVU261
 971 00b0 274B     		ldr	r3, .L46+52
 972 00b2 1E60     		str	r6, [r3]
 973 00b4 5D60     		str	r5, [r3, #4]
 154:Core/Src/main.c **** 		throughput = (double)totalPixels/executionSec;
 974              		.loc 1 154 3 is_stmt 1 view .LVU262
 154:Core/Src/main.c **** 		throughput = (double)totalPixels/executionSec;
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 44


 975              		.loc 1 154 18 is_stmt 0 view .LVU263
 976 00b6 FFF7FEFF 		bl	__aeabi_ui2d
 977              	.LVL79:
 154:Core/Src/main.c **** 		throughput = (double)totalPixels/executionSec;
 978              		.loc 1 154 41 view .LVU264
 979 00ba 0022     		movs	r2, #0
 980 00bc 254B     		ldr	r3, .L46+56
 981 00be FFF7FEFF 		bl	__aeabi_ddiv
 982              	.LVL80:
 983 00c2 8046     		mov	r8, r0
 984              	.LVL81:
 154:Core/Src/main.c **** 		throughput = (double)totalPixels/executionSec;
 985              		.loc 1 154 41 view .LVU265
 986 00c4 8946     		mov	r9, r1
 154:Core/Src/main.c **** 		throughput = (double)totalPixels/executionSec;
 987              		.loc 1 154 16 view .LVU266
 988 00c6 244B     		ldr	r3, .L46+60
 989 00c8 C3E90089 		strd	r8, [r3]
 155:Core/Src/main.c **** 
 990              		.loc 1 155 3 is_stmt 1 view .LVU267
 155:Core/Src/main.c **** 
 991              		.loc 1 155 16 is_stmt 0 view .LVU268
 992 00cc 3046     		mov	r0, r6
 993 00ce 2946     		mov	r1, r5
 994 00d0 FFF7FEFF 		bl	__aeabi_ul2d
 995              	.LVL82:
 155:Core/Src/main.c **** 
 996              		.loc 1 155 35 view .LVU269
 997 00d4 4246     		mov	r2, r8
 998 00d6 4B46     		mov	r3, r9
 999 00d8 FFF7FEFF 		bl	__aeabi_ddiv
 1000              	.LVL83:
 155:Core/Src/main.c **** 
 1001              		.loc 1 155 14 view .LVU270
 1002 00dc 1F4B     		ldr	r3, .L46+64
 1003 00de C3E90001 		strd	r0, [r3]
 157:Core/Src/main.c **** 		//TODO: Turn on LED 1 to signify the end of the operation
 1004              		.loc 1 157 3 is_stmt 1 view .LVU271
 157:Core/Src/main.c **** 		//TODO: Turn on LED 1 to signify the end of the operation
 1005              		.loc 1 157 18 is_stmt 0 view .LVU272
 1006 00e2 1F4B     		ldr	r3, .L46+68
 1007 00e4 5B44     		add	r3, r3, fp
 1008 00e6 C3E90001 		strd	r0, [r3]
 160:Core/Src/main.c **** 
 1009              		.loc 1 160 3 is_stmt 1 view .LVU273
 1010 00ea 0122     		movs	r2, #1
 1011 00ec 0221     		movs	r1, #2
 1012 00ee 3846     		mov	r0, r7
 1013 00f0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1014              	.LVL84:
 165:Core/Src/main.c **** 
 1015              		.loc 1 165 3 view .LVU274
 1016 00f4 4FF4FA60 		mov	r0, #2000
 1017 00f8 FFF7FEFF 		bl	HAL_Delay
 1018              	.LVL85:
 170:Core/Src/main.c **** 
 1019              		.loc 1 170 3 view .LVU275
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 45


 1020 00fc 5246     		mov	r2, r10
 1021 00fe 0121     		movs	r1, #1
 1022 0100 3846     		mov	r0, r7
 1023 0102 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1024              	.LVL86:
 172:Core/Src/main.c **** 
 1025              		.loc 1 172 3 view .LVU276
 1026 0106 5246     		mov	r2, r10
 1027 0108 0221     		movs	r1, #2
 1028 010a 3846     		mov	r0, r7
 1029 010c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1030              	.LVL87:
 1031              	.LBE20:
 127:Core/Src/main.c **** 		int width = widths[i];
 1032              		.loc 1 127 26 discriminator 3 view .LVU277
 1033 0110 0134     		adds	r4, r4, #1
 1034              	.LVL88:
 1035              	.L42:
 127:Core/Src/main.c **** 		int width = widths[i];
 1036              		.loc 1 127 20 discriminator 1 view .LVU278
 1037 0112 042C     		cmp	r4, #4
 1038 0114 8BDD     		ble	.L43
 1039              	.LVL89:
 1040              	.L44:
 127:Core/Src/main.c **** 		int width = widths[i];
 1041              		.loc 1 127 20 is_stmt 0 discriminator 1 view .LVU279
 1042              	.LBE19:
 121:Core/Src/main.c ****   {
 1043              		.loc 1 121 3 is_stmt 1 view .LVU280
 127:Core/Src/main.c **** 		int width = widths[i];
 1044              		.loc 1 127 2 view .LVU281
 1045              	.LBB21:
 127:Core/Src/main.c **** 		int width = widths[i];
 1046              		.loc 1 127 7 view .LVU282
 127:Core/Src/main.c **** 		int width = widths[i];
 1047              		.loc 1 127 11 is_stmt 0 view .LVU283
 1048 0116 0024     		movs	r4, #0
 127:Core/Src/main.c **** 		int width = widths[i];
 1049              		.loc 1 127 2 view .LVU284
 1050 0118 FBE7     		b	.L42
 1051              	.L47:
 1052 011a 00BF     		.align	2
 1053              	.L46:
 1054 011c 00ED00E0 		.word	-536810240
 1055 0120 001000E0 		.word	-536866816
 1056 0124 00000000 		.word	widths
 1057 0128 00000000 		.word	heights
 1058 012c 00040240 		.word	1073873920
 1059 0130 00000000 		.word	start_time
 1060 0134 00000000 		.word	checksum
 1061 0138 00000000 		.word	checksums
 1062 013c 00000000 		.word	end_time
 1063 0140 00000000 		.word	cpuCycle
 1064 0144 00000000 		.word	cpuCycles
 1065 0148 00000000 		.word	execution_time
 1066 014c 00000000 		.word	execTimes
 1067 0150 00000000 		.word	totalPixels
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 46


 1068 0154 00408F40 		.word	1083129856
 1069 0158 00000000 		.word	executionSec
 1070 015c 00000000 		.word	throughput
 1071 0160 00000000 		.word	throughputs
 1072              	.LBE21:
 1073              		.cfi_endproc
 1074              	.LFE134:
 1076              		.global	throughputs
 1077              		.section	.bss.throughputs,"aw",%nobits
 1078              		.align	3
 1081              	throughputs:
 1082 0000 00000000 		.space	40
 1082      00000000 
 1082      00000000 
 1082      00000000 
 1082      00000000 
 1083              		.global	cpuCycles
 1084              		.section	.bss.cpuCycles,"aw",%nobits
 1085              		.align	2
 1088              	cpuCycles:
 1089 0000 00000000 		.space	20
 1089      00000000 
 1089      00000000 
 1089      00000000 
 1089      00000000 
 1090              		.global	checksums
 1091              		.section	.bss.checksums,"aw",%nobits
 1092              		.align	3
 1095              	checksums:
 1096 0000 00000000 		.space	40
 1096      00000000 
 1096      00000000 
 1096      00000000 
 1096      00000000 
 1097              		.global	execTimes
 1098              		.section	.bss.execTimes,"aw",%nobits
 1099              		.align	2
 1102              	execTimes:
 1103 0000 00000000 		.space	20
 1103      00000000 
 1103      00000000 
 1103      00000000 
 1103      00000000 
 1104              		.global	heights
 1105              		.section	.data.heights,"aw"
 1106              		.align	2
 1109              	heights:
 1110 0000 80000000 		.word	128
 1111 0004 A0000000 		.word	160
 1112 0008 C0000000 		.word	192
 1113 000c E0000000 		.word	224
 1114 0010 09010000 		.word	265
 1115              		.global	widths
 1116              		.section	.data.widths,"aw"
 1117              		.align	2
 1120              	widths:
 1121 0000 80000000 		.word	128
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 47


 1122 0004 A0000000 		.word	160
 1123 0008 C0000000 		.word	192
 1124 000c E0000000 		.word	224
 1125 0010 09010000 		.word	265
 1126              		.global	height
 1127              		.section	.bss.height,"aw",%nobits
 1128              		.align	2
 1131              	height:
 1132 0000 00000000 		.space	4
 1133              		.global	width
 1134              		.section	.bss.width,"aw",%nobits
 1135              		.align	2
 1138              	width:
 1139 0000 00000000 		.space	4
 1140              		.global	throughput
 1141              		.section	.bss.throughput,"aw",%nobits
 1142              		.align	3
 1145              	throughput:
 1146 0000 00000000 		.space	8
 1146      00000000 
 1147              		.global	executionSec
 1148              		.section	.bss.executionSec,"aw",%nobits
 1149              		.align	3
 1152              	executionSec:
 1153 0000 00000000 		.space	8
 1153      00000000 
 1154              		.global	totalPixels
 1155              		.section	.bss.totalPixels,"aw",%nobits
 1156              		.align	3
 1159              	totalPixels:
 1160 0000 00000000 		.space	8
 1160      00000000 
 1161              		.global	cpuCycle
 1162              		.section	.bss.cpuCycle,"aw",%nobits
 1163              		.align	2
 1166              	cpuCycle:
 1167 0000 00000000 		.space	4
 1168              		.global	checksum
 1169              		.section	.bss.checksum,"aw",%nobits
 1170              		.align	3
 1173              	checksum:
 1174 0000 00000000 		.space	8
 1174      00000000 
 1175              		.global	execution_time
 1176              		.section	.bss.execution_time,"aw",%nobits
 1177              		.align	2
 1180              	execution_time:
 1181 0000 00000000 		.space	4
 1182              		.global	end_time
 1183              		.section	.bss.end_time,"aw",%nobits
 1184              		.align	2
 1187              	end_time:
 1188 0000 00000000 		.space	4
 1189              		.global	start_time
 1190              		.section	.bss.start_time,"aw",%nobits
 1191              		.align	2
 1194              	start_time:
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 48


 1195 0000 00000000 		.space	4
 1196              		.text
 1197              	.Letext0:
 1198              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1199              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1200              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1201              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1202              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1203              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1204              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1205              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1206              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1207              		.file 12 "<built-in>"
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 49


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:19     .text.MX_GPIO_Init:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:131    .text.MX_GPIO_Init:00000074 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:142    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:148    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:336    .text.calculate_mandelbrot_fixed_point_arithmetic:000000ac $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:344    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:350    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:616    .text.calculate_mandelbrot_double:00000148 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:624    .text.Error_Handler:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:630    .text.Error_Handler:00000000 Error_Handler
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:662    .text.SystemClock_Config:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:668    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:819    .text.SystemClock_Config:000000a4 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:827    .text.main:00000000 $t
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:833    .text.main:00000000 main
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1054   .text.main:0000011c $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1120   .data.widths:00000000 widths
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1109   .data.heights:00000000 heights
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1194   .bss.start_time:00000000 start_time
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1173   .bss.checksum:00000000 checksum
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1095   .bss.checksums:00000000 checksums
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1187   .bss.end_time:00000000 end_time
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1166   .bss.cpuCycle:00000000 cpuCycle
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1088   .bss.cpuCycles:00000000 cpuCycles
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1180   .bss.execution_time:00000000 execution_time
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1102   .bss.execTimes:00000000 execTimes
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1159   .bss.totalPixels:00000000 totalPixels
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1152   .bss.executionSec:00000000 executionSec
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1145   .bss.throughput:00000000 throughput
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1081   .bss.throughputs:00000000 throughputs
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1078   .bss.throughputs:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1085   .bss.cpuCycles:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1092   .bss.checksums:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1099   .bss.execTimes:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1106   .data.heights:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1117   .data.widths:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1131   .bss.height:00000000 height
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1128   .bss.height:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1138   .bss.width:00000000 width
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1135   .bss.width:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1142   .bss.throughput:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1149   .bss.executionSec:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1156   .bss.totalPixels:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1163   .bss.cpuCycle:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1170   .bss.checksum:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1177   .bss.execution_time:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1184   .bss.end_time:00000000 $d
C:\Users\admin\AppData\Local\Temp\ccirlHnw.s:1191   .bss.start_time:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_i2d
__aeabi_dmul
ARM GAS  C:\Users\admin\AppData\Local\Temp\ccirlHnw.s 			page 50


__aeabi_ddiv
__aeabi_dsub
__aeabi_d2iz
__aeabi_dadd
__aeabi_dcmplt
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_ui2d
__aeabi_ul2d
HAL_Init
HAL_GetTick
HAL_Delay
